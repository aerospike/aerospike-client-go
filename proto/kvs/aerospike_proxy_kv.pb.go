// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.12.4
// source: aerospike_proxy_kv.proto

package kvs

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Read policy for AP (availability) namespaces.
// How duplicates should be consulted in a read operation.
// Only makes a difference during migrations and only applicable in AP mode.
type ReadModeAP int32

const (
	// Involve single node in the read operation.
	ReadModeAP_ONE ReadModeAP = 0
	// Involve all duplicates in the read operation.
	ReadModeAP_ALL ReadModeAP = 1
)

// Enum value maps for ReadModeAP.
var (
	ReadModeAP_name = map[int32]string{
		0: "ONE",
		1: "ALL",
	}
	ReadModeAP_value = map[string]int32{
		"ONE": 0,
		"ALL": 1,
	}
)

func (x ReadModeAP) Enum() *ReadModeAP {
	p := new(ReadModeAP)
	*p = x
	return p
}

func (x ReadModeAP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadModeAP) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[0].Descriptor()
}

func (ReadModeAP) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[0]
}

func (x ReadModeAP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadModeAP.Descriptor instead.
func (ReadModeAP) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{0}
}

// Read policy for SC (strong consistency) namespaces.
// Determines SC read consistency options.
type ReadModeSC int32

const (
	// Ensures this client will only see an increasing sequence of record versions.
	// Server only reads from master.  This is the default.
	ReadModeSC_SESSION ReadModeSC = 0
	// Ensures ALL clients will only see an increasing sequence of record versions.
	// Server only reads from master.
	ReadModeSC_LINEARIZE ReadModeSC = 1
	// Server may read from master or any full (non-migrating) replica.
	// Increasing sequence of record versions is not guaranteed.
	ReadModeSC_ALLOW_REPLICA ReadModeSC = 2
	// Server may read from master or any full (non-migrating) replica or from unavailable
	// partitions.  Increasing sequence of record versions is not guaranteed.
	ReadModeSC_ALLOW_UNAVAILABLE ReadModeSC = 3
)

// Enum value maps for ReadModeSC.
var (
	ReadModeSC_name = map[int32]string{
		0: "SESSION",
		1: "LINEARIZE",
		2: "ALLOW_REPLICA",
		3: "ALLOW_UNAVAILABLE",
	}
	ReadModeSC_value = map[string]int32{
		"SESSION":           0,
		"LINEARIZE":         1,
		"ALLOW_REPLICA":     2,
		"ALLOW_UNAVAILABLE": 3,
	}
)

func (x ReadModeSC) Enum() *ReadModeSC {
	p := new(ReadModeSC)
	*p = x
	return p
}

func (x ReadModeSC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReadModeSC) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[1].Descriptor()
}

func (ReadModeSC) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[1]
}

func (x ReadModeSC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReadModeSC.Descriptor instead.
func (ReadModeSC) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{1}
}

// Defines algorithm used to determine the target node for a command.
// Scan and query are not affected by replica algorithm.
//
// Note: The enum ordinals do not match the Aerospike Client ordinals because
// the default has to be ordinal zero in protobuf.
type Replica int32

const (
	// Try node containing master partition first.
	// If connection fails, all commands try nodes containing replicated partitions.
	// If socketTimeout is reached, reads also try nodes containing replicated partitions,
	// but writes remain on master node.
	Replica_SEQUENCE Replica = 0
	// Use node containing key's master partition.
	Replica_MASTER Replica = 1
	// Distribute reads across nodes containing key's master and replicated partitions
	// in round-robin fashion.  Writes always use node containing key's master partition.
	Replica_MASTER_PROLES Replica = 2
	// Try node on the same rack as the client first.  If timeout or there are no nodes on the
	// same rack, use SEQUENCE instead.
	Replica_PREFER_RACK Replica = 3
	// Distribute reads across all nodes in cluster in round-robin fashion.
	// Writes always use node containing key's master partition.
	// This option is useful when the replication factor equals the number
	// of nodes in the cluster and the overhead of requesting proles is not desired.
	Replica_RANDOM Replica = 4
)

// Enum value maps for Replica.
var (
	Replica_name = map[int32]string{
		0: "SEQUENCE",
		1: "MASTER",
		2: "MASTER_PROLES",
		3: "PREFER_RACK",
		4: "RANDOM",
	}
	Replica_value = map[string]int32{
		"SEQUENCE":      0,
		"MASTER":        1,
		"MASTER_PROLES": 2,
		"PREFER_RACK":   3,
		"RANDOM":        4,
	}
)

func (x Replica) Enum() *Replica {
	p := new(Replica)
	*p = x
	return p
}

func (x Replica) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Replica) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[2].Descriptor()
}

func (Replica) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[2]
}

func (x Replica) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Replica.Descriptor instead.
func (Replica) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{2}
}

// Secondary index collection type.
type IndexCollectionType int32

const (
	// Normal scalar index.
	IndexCollectionType_DEFAULT IndexCollectionType = 0
	// Index list elements.
	IndexCollectionType_LIST IndexCollectionType = 1
	// Index map keys.
	IndexCollectionType_MAPKEYS IndexCollectionType = 2
	// Index map values.
	IndexCollectionType_MAPVALUES IndexCollectionType = 3
)

// Enum value maps for IndexCollectionType.
var (
	IndexCollectionType_name = map[int32]string{
		0: "DEFAULT",
		1: "LIST",
		2: "MAPKEYS",
		3: "MAPVALUES",
	}
	IndexCollectionType_value = map[string]int32{
		"DEFAULT":   0,
		"LIST":      1,
		"MAPKEYS":   2,
		"MAPVALUES": 3,
	}
)

func (x IndexCollectionType) Enum() *IndexCollectionType {
	p := new(IndexCollectionType)
	*p = x
	return p
}

func (x IndexCollectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexCollectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[3].Descriptor()
}

func (IndexCollectionType) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[3]
}

func (x IndexCollectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexCollectionType.Descriptor instead.
func (IndexCollectionType) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{3}
}

type OperationType int32

const (
	OperationType_READ        OperationType = 0
	OperationType_READ_HEADER OperationType = 1
	OperationType_WRITE       OperationType = 2
	OperationType_CDT_READ    OperationType = 3
	OperationType_CDT_MODIFY  OperationType = 4
	OperationType_MAP_READ    OperationType = 5
	OperationType_MAP_MODIFY  OperationType = 6
	OperationType_ADD         OperationType = 7
	OperationType_EXP_READ    OperationType = 8
	OperationType_EXP_MODIFY  OperationType = 9
	OperationType_APPEND      OperationType = 10
	OperationType_PREPEND     OperationType = 11
	OperationType_TOUCH       OperationType = 12
	OperationType_BIT_READ    OperationType = 13
	OperationType_BIT_MODIFY  OperationType = 14
	OperationType_DELETE      OperationType = 15
	OperationType_HLL_READ    OperationType = 16
	OperationType_HLL_MODIFY  OperationType = 17
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0:  "READ",
		1:  "READ_HEADER",
		2:  "WRITE",
		3:  "CDT_READ",
		4:  "CDT_MODIFY",
		5:  "MAP_READ",
		6:  "MAP_MODIFY",
		7:  "ADD",
		8:  "EXP_READ",
		9:  "EXP_MODIFY",
		10: "APPEND",
		11: "PREPEND",
		12: "TOUCH",
		13: "BIT_READ",
		14: "BIT_MODIFY",
		15: "DELETE",
		16: "HLL_READ",
		17: "HLL_MODIFY",
	}
	OperationType_value = map[string]int32{
		"READ":        0,
		"READ_HEADER": 1,
		"WRITE":       2,
		"CDT_READ":    3,
		"CDT_MODIFY":  4,
		"MAP_READ":    5,
		"MAP_MODIFY":  6,
		"ADD":         7,
		"EXP_READ":    8,
		"EXP_MODIFY":  9,
		"APPEND":      10,
		"PREPEND":     11,
		"TOUCH":       12,
		"BIT_READ":    13,
		"BIT_MODIFY":  14,
		"DELETE":      15,
		"HLL_READ":    16,
		"HLL_MODIFY":  17,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[4].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[4]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{4}
}

type RecordExistsAction int32

const (
	// Create or update record.
	// Merge write command bins with existing bins.
	RecordExistsAction_UPDATE RecordExistsAction = 0
	// Update record only. Fail if record does not exist.
	// Merge write command bins with existing bins.
	RecordExistsAction_UPDATE_ONLY RecordExistsAction = 1
	// Create or replace record.
	// Delete existing bins not referenced by write command bins.
	// Supported by Aerospike server versions &gt;= 3.1.6.
	RecordExistsAction_REPLACE RecordExistsAction = 2
	// Replace record only. Fail if record does not exist.
	// Delete existing bins not referenced by write command bins.
	// Supported by Aerospike server versions &gt;= 3.1.6.
	RecordExistsAction_REPLACE_ONLY RecordExistsAction = 3
	// Create only.  Fail if record exists.
	RecordExistsAction_CREATE_ONLY RecordExistsAction = 4
)

// Enum value maps for RecordExistsAction.
var (
	RecordExistsAction_name = map[int32]string{
		0: "UPDATE",
		1: "UPDATE_ONLY",
		2: "REPLACE",
		3: "REPLACE_ONLY",
		4: "CREATE_ONLY",
	}
	RecordExistsAction_value = map[string]int32{
		"UPDATE":       0,
		"UPDATE_ONLY":  1,
		"REPLACE":      2,
		"REPLACE_ONLY": 3,
		"CREATE_ONLY":  4,
	}
)

func (x RecordExistsAction) Enum() *RecordExistsAction {
	p := new(RecordExistsAction)
	*p = x
	return p
}

func (x RecordExistsAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordExistsAction) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[5].Descriptor()
}

func (RecordExistsAction) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[5]
}

func (x RecordExistsAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordExistsAction.Descriptor instead.
func (RecordExistsAction) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{5}
}

type GenerationPolicy int32

const (
	// Do not use record generation to restrict writes.
	GenerationPolicy_NONE GenerationPolicy = 0
	// Update/delete record if expected generation is equal to server generation. Otherwise, fail.
	GenerationPolicy_EXPECT_GEN_EQUAL GenerationPolicy = 1
	// Update/delete record if expected generation greater than the server generation. Otherwise, fail.
	// This is useful for restore after backup.
	GenerationPolicy_EXPECT_GEN_GT GenerationPolicy = 2
)

// Enum value maps for GenerationPolicy.
var (
	GenerationPolicy_name = map[int32]string{
		0: "NONE",
		1: "EXPECT_GEN_EQUAL",
		2: "EXPECT_GEN_GT",
	}
	GenerationPolicy_value = map[string]int32{
		"NONE":             0,
		"EXPECT_GEN_EQUAL": 1,
		"EXPECT_GEN_GT":    2,
	}
)

func (x GenerationPolicy) Enum() *GenerationPolicy {
	p := new(GenerationPolicy)
	*p = x
	return p
}

func (x GenerationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[6].Descriptor()
}

func (GenerationPolicy) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[6]
}

func (x GenerationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerationPolicy.Descriptor instead.
func (GenerationPolicy) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{6}
}

type CommitLevel int32

const (
	// Server should wait until successfully committing master and all replicas.
	CommitLevel_COMMIT_ALL CommitLevel = 0
	// Server should wait until successfully committing master only.
	CommitLevel_COMMIT_MASTER CommitLevel = 1
)

// Enum value maps for CommitLevel.
var (
	CommitLevel_name = map[int32]string{
		0: "COMMIT_ALL",
		1: "COMMIT_MASTER",
	}
	CommitLevel_value = map[string]int32{
		"COMMIT_ALL":    0,
		"COMMIT_MASTER": 1,
	}
)

func (x CommitLevel) Enum() *CommitLevel {
	p := new(CommitLevel)
	*p = x
	return p
}

func (x CommitLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[7].Descriptor()
}

func (CommitLevel) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[7]
}

func (x CommitLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitLevel.Descriptor instead.
func (CommitLevel) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{7}
}

type BackgroundTaskStatus int32

const (
	// Task not found.
	BackgroundTaskStatus_NOT_FOUND BackgroundTaskStatus = 0
	// Task in progress.
	BackgroundTaskStatus_IN_PROGRESS BackgroundTaskStatus = 1
	// Task completed.
	BackgroundTaskStatus_COMPLETE BackgroundTaskStatus = 2
)

// Enum value maps for BackgroundTaskStatus.
var (
	BackgroundTaskStatus_name = map[int32]string{
		0: "NOT_FOUND",
		1: "IN_PROGRESS",
		2: "COMPLETE",
	}
	BackgroundTaskStatus_value = map[string]int32{
		"NOT_FOUND":   0,
		"IN_PROGRESS": 1,
		"COMPLETE":    2,
	}
)

func (x BackgroundTaskStatus) Enum() *BackgroundTaskStatus {
	p := new(BackgroundTaskStatus)
	*p = x
	return p
}

func (x BackgroundTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_aerospike_proxy_kv_proto_enumTypes[8].Descriptor()
}

func (BackgroundTaskStatus) Type() protoreflect.EnumType {
	return &file_aerospike_proxy_kv_proto_enumTypes[8]
}

func (x BackgroundTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackgroundTaskStatus.Descriptor instead.
func (BackgroundTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{8}
}

// The about request message.
type AboutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AboutRequest) Reset() {
	*x = AboutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AboutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AboutRequest) ProtoMessage() {}

func (x *AboutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AboutRequest.ProtoReflect.Descriptor instead.
func (*AboutRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{0}
}

// The about response message.
type AboutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proxy server version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AboutResponse) Reset() {
	*x = AboutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AboutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AboutResponse) ProtoMessage() {}

func (x *AboutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AboutResponse.ProtoReflect.Descriptor instead.
func (*AboutResponse) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{1}
}

func (x *AboutResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Read policy attributes used in read database commands that are not part of
// the wire protocol.
type ReadPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read policy for AP (availability) namespaces.
	Replica Replica `protobuf:"varint,1,opt,name=replica,proto3,enum=Replica" json:"replica,omitempty"`
	// Read policy for SC (strong consistency) namespaces.
	ReadModeAP ReadModeAP `protobuf:"varint,2,opt,name=readModeAP,proto3,enum=ReadModeAP" json:"readModeAP,omitempty"`
	// Replica algorithm used to determine the target node
	// for a single record command.
	// Scan and query are not affected by replica algorithms.
	ReadModeSC ReadModeSC `protobuf:"varint,3,opt,name=readModeSC,proto3,enum=ReadModeSC" json:"readModeSC,omitempty"`
}

func (x *ReadPolicy) Reset() {
	*x = ReadPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPolicy) ProtoMessage() {}

func (x *ReadPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPolicy.ProtoReflect.Descriptor instead.
func (*ReadPolicy) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{2}
}

func (x *ReadPolicy) GetReplica() Replica {
	if x != nil {
		return x.Replica
	}
	return Replica_SEQUENCE
}

func (x *ReadPolicy) GetReadModeAP() ReadModeAP {
	if x != nil {
		return x.ReadModeAP
	}
	return ReadModeAP_ONE
}

func (x *ReadPolicy) GetReadModeSC() ReadModeSC {
	if x != nil {
		return x.ReadModeSC
	}
	return ReadModeSC_SESSION
}

// Write policy attributes used in write database commands that are not part of
// the wire protocol.
type WritePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read policy for AP (availability) namespaces.
	Replica Replica `protobuf:"varint,1,opt,name=replica,proto3,enum=Replica" json:"replica,omitempty"`
	// Read policy for SC (strong consistency) namespaces.
	ReadModeAP ReadModeAP `protobuf:"varint,2,opt,name=readModeAP,proto3,enum=ReadModeAP" json:"readModeAP,omitempty"`
	// Replica algorithm used to determine the target node
	// for a single record command.
	// Scan and query are not affected by replica algorithms.
	ReadModeSC ReadModeSC `protobuf:"varint,3,opt,name=readModeSC,proto3,enum=ReadModeSC" json:"readModeSC,omitempty"`
}

func (x *WritePolicy) Reset() {
	*x = WritePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePolicy) ProtoMessage() {}

func (x *WritePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePolicy.ProtoReflect.Descriptor instead.
func (*WritePolicy) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{3}
}

func (x *WritePolicy) GetReplica() Replica {
	if x != nil {
		return x.Replica
	}
	return Replica_SEQUENCE
}

func (x *WritePolicy) GetReadModeAP() ReadModeAP {
	if x != nil {
		return x.ReadModeAP
	}
	return ReadModeAP_ONE
}

func (x *WritePolicy) GetReadModeSC() ReadModeSC {
	if x != nil {
		return x.ReadModeSC
	}
	return ReadModeSC_SESSION
}

// The request message containing the user's name.
type AerospikeRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the request in the stream.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Client retry iteration.
	Iteration uint32 `protobuf:"varint,2,opt,name=iteration,proto3" json:"iteration,omitempty"`
	// Aerospike wire format request payload.
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Read policy for read requests.
	ReadPolicy *ReadPolicy `protobuf:"bytes,4,opt,name=readPolicy,proto3,oneof" json:"readPolicy,omitempty"`
	// Write policy for write requests.
	WritePolicy *WritePolicy `protobuf:"bytes,5,opt,name=writePolicy,proto3,oneof" json:"writePolicy,omitempty"`
	// Scan request for scan.
	ScanRequest *ScanRequest `protobuf:"bytes,6,opt,name=scanRequest,proto3,oneof" json:"scanRequest,omitempty"`
	// Request for running a query.
	QueryRequest *QueryRequest `protobuf:"bytes,7,opt,name=queryRequest,proto3,oneof" json:"queryRequest,omitempty"`
	// Abort a scan/query on application error.
	AbortRequest *AbortRequest `protobuf:"bytes,8,opt,name=abortRequest,proto3,oneof" json:"abortRequest,omitempty"`
	// Request for executing operations background on matching records.
	BackgroundExecuteRequest *BackgroundExecuteRequest `protobuf:"bytes,9,opt,name=backgroundExecuteRequest,proto3,oneof" json:"backgroundExecuteRequest,omitempty"`
	// Request for getting background task status.
	BackgroundTaskStatusRequest *BackgroundTaskStatusRequest `protobuf:"bytes,10,opt,name=backgroundTaskStatusRequest,proto3,oneof" json:"backgroundTaskStatusRequest,omitempty"`
}

func (x *AerospikeRequestPayload) Reset() {
	*x = AerospikeRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AerospikeRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AerospikeRequestPayload) ProtoMessage() {}

func (x *AerospikeRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AerospikeRequestPayload.ProtoReflect.Descriptor instead.
func (*AerospikeRequestPayload) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{4}
}

func (x *AerospikeRequestPayload) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AerospikeRequestPayload) GetIteration() uint32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

func (x *AerospikeRequestPayload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AerospikeRequestPayload) GetReadPolicy() *ReadPolicy {
	if x != nil {
		return x.ReadPolicy
	}
	return nil
}

func (x *AerospikeRequestPayload) GetWritePolicy() *WritePolicy {
	if x != nil {
		return x.WritePolicy
	}
	return nil
}

func (x *AerospikeRequestPayload) GetScanRequest() *ScanRequest {
	if x != nil {
		return x.ScanRequest
	}
	return nil
}

func (x *AerospikeRequestPayload) GetQueryRequest() *QueryRequest {
	if x != nil {
		return x.QueryRequest
	}
	return nil
}

func (x *AerospikeRequestPayload) GetAbortRequest() *AbortRequest {
	if x != nil {
		return x.AbortRequest
	}
	return nil
}

func (x *AerospikeRequestPayload) GetBackgroundExecuteRequest() *BackgroundExecuteRequest {
	if x != nil {
		return x.BackgroundExecuteRequest
	}
	return nil
}

func (x *AerospikeRequestPayload) GetBackgroundTaskStatusRequest() *BackgroundTaskStatusRequest {
	if x != nil {
		return x.BackgroundTaskStatusRequest
	}
	return nil
}

// The request message containing the user's name.
type AerospikeResponsePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the corresponding request in the stream.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status of the corresponding request.
	//
	//	if status equals 0
	//	   The proxy received a valid response from Aerospike. The payload's
	//	   result code should be used as the client result code.
	//	else
	//	   The request failed at the proxy. This status should be used
	//	   as the client result code.
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// This flag indicates that the write transaction may have completed,
	// even though the client sees an error.
	InDoubt bool `protobuf:"varint,3,opt,name=inDoubt,proto3" json:"inDoubt,omitempty"`
	// Aerospike wire format request payload.
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// For requests with multiple responses like batch and queries,
	// hasNext flag indicates if there are more responses to follow this
	// response or if this is the last response for this request.
	HasNext bool `protobuf:"varint,5,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	// Background task status, populated for background task request.
	BackgroundTaskStatus *BackgroundTaskStatus `protobuf:"varint,6,opt,name=backgroundTaskStatus,proto3,enum=BackgroundTaskStatus,oneof" json:"backgroundTaskStatus,omitempty"`
}

func (x *AerospikeResponsePayload) Reset() {
	*x = AerospikeResponsePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AerospikeResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AerospikeResponsePayload) ProtoMessage() {}

func (x *AerospikeResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AerospikeResponsePayload.ProtoReflect.Descriptor instead.
func (*AerospikeResponsePayload) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{5}
}

func (x *AerospikeResponsePayload) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AerospikeResponsePayload) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AerospikeResponsePayload) GetInDoubt() bool {
	if x != nil {
		return x.InDoubt
	}
	return false
}

func (x *AerospikeResponsePayload) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *AerospikeResponsePayload) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *AerospikeResponsePayload) GetBackgroundTaskStatus() BackgroundTaskStatus {
	if x != nil && x.BackgroundTaskStatus != nil {
		return *x.BackgroundTaskStatus
	}
	return BackgroundTaskStatus_NOT_FOUND
}

// Scan policy attributes used by queries.
// Scan requests are send completely using proto buffers and hence include all policy attributes.
type ScanPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read policy for AP (availability) namespaces.
	Replica Replica `protobuf:"varint,1,opt,name=replica,proto3,enum=Replica" json:"replica,omitempty"`
	// Read policy for SC (strong consistency) namespaces.
	ReadModeAP ReadModeAP `protobuf:"varint,2,opt,name=readModeAP,proto3,enum=ReadModeAP" json:"readModeAP,omitempty"`
	// Replica algorithm used to determine the target node
	// for a single record command.
	// Scan and scan are not affected by replica algorithms.
	ReadModeSC ReadModeSC `protobuf:"varint,3,opt,name=readModeSC,proto3,enum=ReadModeSC" json:"readModeSC,omitempty"`
	// Use zlib compression on command buffers sent to the server and responses received
	// from the server when the buffer size is greater than 128 bytes.
	// This option will increase cpu and memory usage (for extra compressed buffers),but
	// decrease the size of data sent over the network.
	Compress bool `protobuf:"varint,4,opt,name=compress,proto3" json:"compress,omitempty"`
	// Optional expression filter. If filterExp exists and evaluates to false, the
	// transaction is ignored.
	Expression []byte `protobuf:"bytes,5,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	// Total transaction timeout in milliseconds.
	// Default for all other commands: 1000ms
	TotalTimeout *uint32 `protobuf:"varint,6,opt,name=totalTimeout,proto3,oneof" json:"totalTimeout,omitempty"`
	// Approximate number of records to return to client. This number is divided by the
	// number of nodes involved in the scan.  The actual number of records returned
	// may be less than maxRecords if node record counts are small and unbalanced across
	// nodes.
	// Default: 0 (do not limit record count)
	MaxRecords *uint64 `protobuf:"varint,7,opt,name=maxRecords,proto3,oneof" json:"maxRecords,omitempty"`
	// Limit returned records per second (rps) rate for each server.
	// Do not apply rps limit if recordsPerSecond is zero.
	// Default: 0
	RecordsPerSecond *uint32 `protobuf:"varint,8,opt,name=recordsPerSecond,proto3,oneof" json:"recordsPerSecond,omitempty"`
	// Should scan requests be issued in parallel.
	// Default: true
	ConcurrentNodes *bool `protobuf:"varint,9,opt,name=concurrentNodes,proto3,oneof" json:"concurrentNodes,omitempty"`
	// Maximum number of concurrent requests to server nodes at any point in time.
	// If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then queries
	// will be made to 8 nodes in parallel.  When a scan completes, a new scan will
	// be issued until all 16 nodes have been queried.
	// Default: 0 (issue requests to all server nodes in parallel)
	MaxConcurrentNodes *uint32 `protobuf:"varint,10,opt,name=maxConcurrentNodes,proto3,oneof" json:"maxConcurrentNodes,omitempty"`
	// Should bin data be retrieved. If false, only record digests (and user keys
	// if stored on the server) are retrieved.
	// Default: true
	IncludeBinData *bool `protobuf:"varint,11,opt,name=includeBinData,proto3,oneof" json:"includeBinData,omitempty"`
}

func (x *ScanPolicy) Reset() {
	*x = ScanPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanPolicy) ProtoMessage() {}

func (x *ScanPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanPolicy.ProtoReflect.Descriptor instead.
func (*ScanPolicy) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{6}
}

func (x *ScanPolicy) GetReplica() Replica {
	if x != nil {
		return x.Replica
	}
	return Replica_SEQUENCE
}

func (x *ScanPolicy) GetReadModeAP() ReadModeAP {
	if x != nil {
		return x.ReadModeAP
	}
	return ReadModeAP_ONE
}

func (x *ScanPolicy) GetReadModeSC() ReadModeSC {
	if x != nil {
		return x.ReadModeSC
	}
	return ReadModeSC_SESSION
}

func (x *ScanPolicy) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *ScanPolicy) GetExpression() []byte {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ScanPolicy) GetTotalTimeout() uint32 {
	if x != nil && x.TotalTimeout != nil {
		return *x.TotalTimeout
	}
	return 0
}

func (x *ScanPolicy) GetMaxRecords() uint64 {
	if x != nil && x.MaxRecords != nil {
		return *x.MaxRecords
	}
	return 0
}

func (x *ScanPolicy) GetRecordsPerSecond() uint32 {
	if x != nil && x.RecordsPerSecond != nil {
		return *x.RecordsPerSecond
	}
	return 0
}

func (x *ScanPolicy) GetConcurrentNodes() bool {
	if x != nil && x.ConcurrentNodes != nil {
		return *x.ConcurrentNodes
	}
	return false
}

func (x *ScanPolicy) GetMaxConcurrentNodes() uint32 {
	if x != nil && x.MaxConcurrentNodes != nil {
		return *x.MaxConcurrentNodes
	}
	return 0
}

func (x *ScanPolicy) GetIncludeBinData() bool {
	if x != nil && x.IncludeBinData != nil {
		return *x.IncludeBinData
	}
	return false
}

// Partition status used to perform partial scans on client side retries.
type PartitionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The partition status.
	Id *uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Begin value to start scanning / querying after.
	BVal *int64 `protobuf:"varint,2,opt,name=bVal,proto3,oneof" json:"bVal,omitempty"`
	// Digest to start scanning / querying after.
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	// Indicates this partition should be tried.
	// Should be set to true for the first attempt as well.
	Retry bool `protobuf:"varint,5,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *PartitionStatus) Reset() {
	*x = PartitionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStatus) ProtoMessage() {}

func (x *PartitionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStatus.ProtoReflect.Descriptor instead.
func (*PartitionStatus) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionStatus) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PartitionStatus) GetBVal() int64 {
	if x != nil && x.BVal != nil {
		return *x.BVal
	}
	return 0
}

func (x *PartitionStatus) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *PartitionStatus) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

// A partition filter for scans and queries.
type PartitionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start partition id.
	// Not required if the digest to start scanning from is specified.
	Begin *uint32 `protobuf:"varint,1,opt,name=begin,proto3,oneof" json:"begin,omitempty"`
	// The number of records to scan.
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Optional digest to start scanning from.
	Digest []byte `protobuf:"bytes,3,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	// Optional partition statuses used on retries to restart
	// from last known record for the partition.
	PartitionStatuses []*PartitionStatus `protobuf:"bytes,4,rep,name=partitionStatuses,proto3" json:"partitionStatuses,omitempty"`
	// Indicates if all partitions in this filter should
	// be retried ignoring the partition status
	Retry bool `protobuf:"varint,5,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *PartitionFilter) Reset() {
	*x = PartitionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionFilter) ProtoMessage() {}

func (x *PartitionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionFilter.ProtoReflect.Descriptor instead.
func (*PartitionFilter) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{8}
}

func (x *PartitionFilter) GetBegin() uint32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *PartitionFilter) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PartitionFilter) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *PartitionFilter) GetPartitionStatuses() []*PartitionStatus {
	if x != nil {
		return x.PartitionStatuses
	}
	return nil
}

func (x *PartitionFilter) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

// A scan request.
type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional scan policy.
	ScanPolicy *ScanPolicy `protobuf:"bytes,1,opt,name=scanPolicy,proto3,oneof" json:"scanPolicy,omitempty"`
	// The namespace to scan.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Optional set name.
	SetName *string `protobuf:"bytes,3,opt,name=setName,proto3,oneof" json:"setName,omitempty"`
	// Optional bin to retrieve. All bins will be returned
	// if not specified.
	BinNames []string `protobuf:"bytes,4,rep,name=binNames,proto3" json:"binNames,omitempty"`
	// Optional partition filter to selectively scan partitions.
	PartitionFilter *PartitionFilter `protobuf:"bytes,5,opt,name=partitionFilter,proto3,oneof" json:"partitionFilter,omitempty"`
}

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{9}
}

func (x *ScanRequest) GetScanPolicy() *ScanPolicy {
	if x != nil {
		return x.ScanPolicy
	}
	return nil
}

func (x *ScanRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ScanRequest) GetSetName() string {
	if x != nil && x.SetName != nil {
		return *x.SetName
	}
	return ""
}

func (x *ScanRequest) GetBinNames() []string {
	if x != nil {
		return x.BinNames
	}
	return nil
}

func (x *ScanRequest) GetPartitionFilter() *PartitionFilter {
	if x != nil {
		return x.PartitionFilter
	}
	return nil
}

// Query policy attributes used by queries.
// Query requests are send completely using proto buffers and hence include all policy attributes.
type QueryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read policy for AP (availability) namespaces.
	Replica Replica `protobuf:"varint,1,opt,name=replica,proto3,enum=Replica" json:"replica,omitempty"`
	// Read policy for SC (strong consistency) namespaces.
	ReadModeAP ReadModeAP `protobuf:"varint,2,opt,name=readModeAP,proto3,enum=ReadModeAP" json:"readModeAP,omitempty"`
	// Replica algorithm used to determine the target node
	// for a single record command.
	// Scan and query are not affected by replica algorithms.
	ReadModeSC ReadModeSC `protobuf:"varint,3,opt,name=readModeSC,proto3,enum=ReadModeSC" json:"readModeSC,omitempty"`
	// Send user defined key in addition to hash digest on both reads and writes.
	// If the key is sent on a write, the key will be stored with the record on
	// the server.
	// Default: false (do not send the user defined key)
	SendKey *bool `protobuf:"varint,4,opt,name=sendKey,proto3,oneof" json:"sendKey,omitempty"`
	// Use zlib compression on command buffers sent to the server and responses received
	// from the server when the buffer size is greater than 128 bytes.
	// This option will increase cpu and memory usage (for extra compressed buffers),but
	// decrease the size of data sent over the network.
	Compress bool `protobuf:"varint,5,opt,name=compress,proto3" json:"compress,omitempty"`
	// Optional expression filter. If filterExp exists and evaluates to false, the
	// transaction is ignored.
	Expression []byte `protobuf:"bytes,6,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	// Total transaction timeout in milliseconds.
	// Default for all other commands: 1000ms
	TotalTimeout *uint32 `protobuf:"varint,7,opt,name=totalTimeout,proto3,oneof" json:"totalTimeout,omitempty"`
	// Maximum number of concurrent requests to server nodes at any point in time.
	// If there are 16 nodes in the cluster and maxConcurrentNodes is 8, then queries
	// will be made to 8 nodes in parallel.  When a query completes, a new query will
	// be issued until all 16 nodes have been queried.
	// Default: 0 (issue requests to all server nodes in parallel)
	MaxConcurrentNodes *uint32 `protobuf:"varint,8,opt,name=maxConcurrentNodes,proto3,oneof" json:"maxConcurrentNodes,omitempty"`
	// Number of records to place in queue before blocking.
	// Records received from multiple server nodes will be placed in a queue.
	// A separate thread consumes these records in parallel.
	// If the queue is full, the producer threads will block until records are consumed.
	// Default: 5000
	RecordQueueSize *uint32 `protobuf:"varint,9,opt,name=recordQueueSize,proto3,oneof" json:"recordQueueSize,omitempty"`
	// Should bin data be retrieved. If false, only record digests (and user keys
	// if stored on the server) are retrieved.
	// Default: true
	IncludeBinData *bool `protobuf:"varint,10,opt,name=includeBinData,proto3,oneof" json:"includeBinData,omitempty"`
	// Terminate query if cluster is in migration state. If the server supports partition
	// queries or the query filter is null (scan), this field is ignored.
	// Default: false
	FailOnClusterChange *bool `protobuf:"varint,11,opt,name=failOnClusterChange,proto3,oneof" json:"failOnClusterChange,omitempty"`
	// Is query expected to return less than 100 records per node.
	// If true, the server will optimize the query for a small record set.
	// This field is ignored for aggregation queries, background queries
	// and server versions &lt; 6.0.
	// Default: false
	ShortQuery *bool `protobuf:"varint,12,opt,name=shortQuery,proto3,oneof" json:"shortQuery,omitempty"`
	// Timeout in milliseconds for "cluster-stable" info command that is run when
	// failOnClusterChange is true and server version is less than 6.0.
	//
	//	Default: 1000
	InfoTimeout *uint32 `protobuf:"varint,13,opt,name=infoTimeout,proto3,oneof" json:"infoTimeout,omitempty"`
}

func (x *QueryPolicy) Reset() {
	*x = QueryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPolicy) ProtoMessage() {}

func (x *QueryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPolicy.ProtoReflect.Descriptor instead.
func (*QueryPolicy) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{10}
}

func (x *QueryPolicy) GetReplica() Replica {
	if x != nil {
		return x.Replica
	}
	return Replica_SEQUENCE
}

func (x *QueryPolicy) GetReadModeAP() ReadModeAP {
	if x != nil {
		return x.ReadModeAP
	}
	return ReadModeAP_ONE
}

func (x *QueryPolicy) GetReadModeSC() ReadModeSC {
	if x != nil {
		return x.ReadModeSC
	}
	return ReadModeSC_SESSION
}

func (x *QueryPolicy) GetSendKey() bool {
	if x != nil && x.SendKey != nil {
		return *x.SendKey
	}
	return false
}

func (x *QueryPolicy) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *QueryPolicy) GetExpression() []byte {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *QueryPolicy) GetTotalTimeout() uint32 {
	if x != nil && x.TotalTimeout != nil {
		return *x.TotalTimeout
	}
	return 0
}

func (x *QueryPolicy) GetMaxConcurrentNodes() uint32 {
	if x != nil && x.MaxConcurrentNodes != nil {
		return *x.MaxConcurrentNodes
	}
	return 0
}

func (x *QueryPolicy) GetRecordQueueSize() uint32 {
	if x != nil && x.RecordQueueSize != nil {
		return *x.RecordQueueSize
	}
	return 0
}

func (x *QueryPolicy) GetIncludeBinData() bool {
	if x != nil && x.IncludeBinData != nil {
		return *x.IncludeBinData
	}
	return false
}

func (x *QueryPolicy) GetFailOnClusterChange() bool {
	if x != nil && x.FailOnClusterChange != nil {
		return *x.FailOnClusterChange
	}
	return false
}

func (x *QueryPolicy) GetShortQuery() bool {
	if x != nil && x.ShortQuery != nil {
		return *x.ShortQuery
	}
	return false
}

func (x *QueryPolicy) GetInfoTimeout() uint32 {
	if x != nil && x.InfoTimeout != nil {
		return *x.InfoTimeout
	}
	return 0
}

// Query statement filter
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the filter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Secondary index collection type.
	ColType IndexCollectionType `protobuf:"varint,2,opt,name=colType,proto3,enum=IndexCollectionType" json:"colType,omitempty"`
	// Optional filter context packed in Aerospike format.
	PackedCtx []byte `protobuf:"bytes,3,opt,name=packedCtx,proto3,oneof" json:"packedCtx,omitempty"`
	// The queried column particle type.
	ValType int32 `protobuf:"varint,4,opt,name=valType,proto3" json:"valType,omitempty"`
	// The Aerospike encoded query start "Value"
	Begin []byte `protobuf:"bytes,5,opt,name=begin,proto3,oneof" json:"begin,omitempty"`
	// The Aerospike encoded query end "Value"
	End []byte `protobuf:"bytes,6,opt,name=end,proto3,oneof" json:"end,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{11}
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetColType() IndexCollectionType {
	if x != nil {
		return x.ColType
	}
	return IndexCollectionType_DEFAULT
}

func (x *Filter) GetPackedCtx() []byte {
	if x != nil {
		return x.PackedCtx
	}
	return nil
}

func (x *Filter) GetValType() int32 {
	if x != nil {
		return x.ValType
	}
	return 0
}

func (x *Filter) GetBegin() []byte {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *Filter) GetEnd() []byte {
	if x != nil {
		return x.End
	}
	return nil
}

// Single record operation.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The operation type.
	Type OperationType `protobuf:"varint,1,opt,name=type,proto3,enum=OperationType" json:"type,omitempty"`
	// Optional bin name.
	BinName *string `protobuf:"bytes,2,opt,name=binName,proto3,oneof" json:"binName,omitempty"`
	// Optional bin value.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{12}
}

func (x *Operation) GetType() OperationType {
	if x != nil {
		return x.Type
	}
	return OperationType_READ
}

func (x *Operation) GetBinName() string {
	if x != nil && x.BinName != nil {
		return *x.BinName
	}
	return ""
}

func (x *Operation) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Query statement.
type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace to query.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Optional set name.
	SetName *string `protobuf:"bytes,2,opt,name=setName,proto3,oneof" json:"setName,omitempty"`
	// Optional index name.
	IndexName *string `protobuf:"bytes,3,opt,name=indexName,proto3,oneof" json:"indexName,omitempty"`
	// Optional bins names to return for each result record.
	// If not specified all bins are returned.
	BinNames []string `protobuf:"bytes,4,rep,name=binNames,proto3" json:"binNames,omitempty"`
	// Optional Filter encoded in Aerospike wire format.
	Filter *Filter `protobuf:"bytes,5,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Aggregation file name.
	PackageName string `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	// Aggregation function name.
	FunctionName string `protobuf:"bytes,7,opt,name=functionName,proto3" json:"functionName,omitempty"`
	// Aggregation function arguments encoded as bytes using Aerospike wire format.
	FunctionArgs [][]byte `protobuf:"bytes,8,rep,name=functionArgs,proto3" json:"functionArgs,omitempty"`
	// Operations to be performed on query encoded as bytes using Aerospike wire format.
	Operations []*Operation `protobuf:"bytes,9,rep,name=operations,proto3" json:"operations,omitempty"`
	// Optional taskId.
	TaskId *int64 `protobuf:"varint,10,opt,name=taskId,proto3,oneof" json:"taskId,omitempty"`
	// Approximate number of records to return to client. This number is divided by the
	// number of nodes involved in the scan.  The actual number of records returned
	// may be less than maxRecords if node record counts are small and unbalanced across
	// nodes.
	// Default: 0 (do not limit record count)
	MaxRecords *uint64 `protobuf:"varint,11,opt,name=maxRecords,proto3,oneof" json:"maxRecords,omitempty"`
	// Limit returned records per second (rps) rate for each server.
	// Do not apply rps limit if recordsPerSecond is zero.
	// Default: 0
	RecordsPerSecond *uint32 `protobuf:"varint,12,opt,name=recordsPerSecond,proto3,oneof" json:"recordsPerSecond,omitempty"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{13}
}

func (x *Statement) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Statement) GetSetName() string {
	if x != nil && x.SetName != nil {
		return *x.SetName
	}
	return ""
}

func (x *Statement) GetIndexName() string {
	if x != nil && x.IndexName != nil {
		return *x.IndexName
	}
	return ""
}

func (x *Statement) GetBinNames() []string {
	if x != nil {
		return x.BinNames
	}
	return nil
}

func (x *Statement) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *Statement) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Statement) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *Statement) GetFunctionArgs() [][]byte {
	if x != nil {
		return x.FunctionArgs
	}
	return nil
}

func (x *Statement) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *Statement) GetTaskId() int64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *Statement) GetMaxRecords() uint64 {
	if x != nil && x.MaxRecords != nil {
		return *x.MaxRecords
	}
	return 0
}

func (x *Statement) GetRecordsPerSecond() uint32 {
	if x != nil && x.RecordsPerSecond != nil {
		return *x.RecordsPerSecond
	}
	return 0
}

// A query request.
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional query policy.
	QueryPolicy *QueryPolicy `protobuf:"bytes,1,opt,name=queryPolicy,proto3,oneof" json:"queryPolicy,omitempty"`
	// The query statement.
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	// Set to true for background queries.
	Background bool `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	// Optional partition filter to selectively query partitions.
	PartitionFilter *PartitionFilter `protobuf:"bytes,4,opt,name=partitionFilter,proto3,oneof" json:"partitionFilter,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{14}
}

func (x *QueryRequest) GetQueryPolicy() *QueryPolicy {
	if x != nil {
		return x.QueryPolicy
	}
	return nil
}

func (x *QueryRequest) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

func (x *QueryRequest) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *QueryRequest) GetPartitionFilter() *PartitionFilter {
	if x != nil {
		return x.PartitionFilter
	}
	return nil
}

type BackgroundExecutePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Read policy for AP (availability) namespaces.
	Replica Replica `protobuf:"varint,1,opt,name=replica,proto3,enum=Replica" json:"replica,omitempty"`
	// Read policy for SC (strong consistency) namespaces.
	ReadModeAP ReadModeAP `protobuf:"varint,2,opt,name=readModeAP,proto3,enum=ReadModeAP" json:"readModeAP,omitempty"`
	// Replica algorithm used to determine the target node
	// for a single record command.
	// Scan and scan are not affected by replica algorithms.
	ReadModeSC ReadModeSC `protobuf:"varint,3,opt,name=readModeSC,proto3,enum=ReadModeSC" json:"readModeSC,omitempty"`
	// Use zlib compression on command buffers sent to the server and responses received
	// from the server when the buffer size is greater than 128 bytes.
	// This option will increase cpu and memory usage (for extra compressed buffers),but
	// decrease the size of data sent over the network.
	Compress bool `protobuf:"varint,4,opt,name=compress,proto3" json:"compress,omitempty"`
	// Optional expression filter. If filterExp exists and evaluates to false, the
	// transaction is ignored.
	Expression []byte `protobuf:"bytes,5,opt,name=expression,proto3,oneof" json:"expression,omitempty"`
	// Total transaction timeout in milliseconds.
	// Default for all other commands: 1000ms
	TotalTimeout *uint32 `protobuf:"varint,6,opt,name=totalTimeout,proto3,oneof" json:"totalTimeout,omitempty"`
	// Send user defined key in addition to hash digest on both reads and writes.
	// If the key is sent on a write, the key will be stored with the record on
	// the server.
	// <p>
	// Default: false (do not send the user defined key)
	SendKey *bool `protobuf:"varint,7,opt,name=sendKey,proto3,oneof" json:"sendKey,omitempty"`
	// Qualify how to handle writes where the record already exists.
	//
	// Default: RecordExistsAction.UPDATE
	RecordExistsAction *RecordExistsAction `protobuf:"varint,8,opt,name=recordExistsAction,proto3,enum=RecordExistsAction,oneof" json:"recordExistsAction,omitempty"`
	// Qualify how to handle record writes based on record generation. The default (NONE)
	// indicates that the generation is not used to restrict writes.
	//
	// The server does not support this field for UDF execute() calls. The read-modify-write
	// usage model can still be enforced inside the UDF code itself.
	//
	// Default: GenerationPolicy.NONE
	GenerationPolicy *GenerationPolicy `protobuf:"varint,9,opt,name=generationPolicy,proto3,enum=GenerationPolicy,oneof" json:"generationPolicy,omitempty"`
	// Desired consistency guarantee when committing a transaction on the server. The default
	// (COMMIT_ALL) indicates that the server should wait for master and all replica commits to
	// be successful before returning success to the client.
	//
	// Default: CommitLevel.COMMIT_ALL
	CommitLevel *CommitLevel `protobuf:"varint,10,opt,name=commitLevel,proto3,enum=CommitLevel,oneof" json:"commitLevel,omitempty"`
	// Expected generation. Generation is the number of times a record has been modified
	// (including creation) on the server. If a write operation is creating a record,
	// the expected generation would be <code>0</code>. This field is only relevant when
	// generationPolicy is not NONE.
	//
	// The server does not support this field for UDF execute() calls. The read-modify-write
	// usage model can still be enforced inside the UDF code itself.
	//
	// Default: 0
	Generation *uint32 `protobuf:"varint,11,opt,name=generation,proto3,oneof" json:"generation,omitempty"`
	// Record expiration. Also known as ttl (time to live).
	// Seconds record will live before being removed by the server.
	//
	// Expiration values:
	//
	//   - -2: Do not change ttl when record is updated.
	//   - -1: Never expire.
	//   - 0: Default to namespace configuration variable "default-ttl" on the server.
	//   - &gt; 0: Actual ttl in seconds.<br>
	//
	// Default: 0
	Expiration *uint32 `protobuf:"varint,12,opt,name=expiration,proto3,oneof" json:"expiration,omitempty"`
	// For client operate(), return a result for every operation.
	//
	// Some operations do not return results by default (ListOperation.clear() for example).
	// This can make it difficult to determine the desired result offset in the returned
	// bin's result list.
	//
	// Setting respondAllOps to true makes it easier to identify the desired result offset
	// (result offset equals bin's operate sequence).  If there is a map operation in operate(),
	// respondAllOps will be forced to true for that operate() call.
	//
	// Default: false
	RespondAllOps *bool `protobuf:"varint,13,opt,name=respondAllOps,proto3,oneof" json:"respondAllOps,omitempty"`
	// If the transaction results in a record deletion, leave a tombstone for the record.
	// This prevents deleted records from reappearing after node failures.
	// Valid for Aerospike Server Enterprise Edition 3.10+ only.
	//
	// Default: false (do not tombstone deleted records).
	DurableDelete *bool `protobuf:"varint,14,opt,name=durableDelete,proto3,oneof" json:"durableDelete,omitempty"`
	// Operate in XDR mode.  Some external connectors may need to emulate an XDR client.
	// If enabled, an XDR bit is set for writes in the wire protocol.
	//
	// Default: false.
	Xdr *bool `protobuf:"varint,15,opt,name=xdr,proto3,oneof" json:"xdr,omitempty"`
}

func (x *BackgroundExecutePolicy) Reset() {
	*x = BackgroundExecutePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundExecutePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundExecutePolicy) ProtoMessage() {}

func (x *BackgroundExecutePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundExecutePolicy.ProtoReflect.Descriptor instead.
func (*BackgroundExecutePolicy) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{15}
}

func (x *BackgroundExecutePolicy) GetReplica() Replica {
	if x != nil {
		return x.Replica
	}
	return Replica_SEQUENCE
}

func (x *BackgroundExecutePolicy) GetReadModeAP() ReadModeAP {
	if x != nil {
		return x.ReadModeAP
	}
	return ReadModeAP_ONE
}

func (x *BackgroundExecutePolicy) GetReadModeSC() ReadModeSC {
	if x != nil {
		return x.ReadModeSC
	}
	return ReadModeSC_SESSION
}

func (x *BackgroundExecutePolicy) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *BackgroundExecutePolicy) GetExpression() []byte {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *BackgroundExecutePolicy) GetTotalTimeout() uint32 {
	if x != nil && x.TotalTimeout != nil {
		return *x.TotalTimeout
	}
	return 0
}

func (x *BackgroundExecutePolicy) GetSendKey() bool {
	if x != nil && x.SendKey != nil {
		return *x.SendKey
	}
	return false
}

func (x *BackgroundExecutePolicy) GetRecordExistsAction() RecordExistsAction {
	if x != nil && x.RecordExistsAction != nil {
		return *x.RecordExistsAction
	}
	return RecordExistsAction_UPDATE
}

func (x *BackgroundExecutePolicy) GetGenerationPolicy() GenerationPolicy {
	if x != nil && x.GenerationPolicy != nil {
		return *x.GenerationPolicy
	}
	return GenerationPolicy_NONE
}

func (x *BackgroundExecutePolicy) GetCommitLevel() CommitLevel {
	if x != nil && x.CommitLevel != nil {
		return *x.CommitLevel
	}
	return CommitLevel_COMMIT_ALL
}

func (x *BackgroundExecutePolicy) GetGeneration() uint32 {
	if x != nil && x.Generation != nil {
		return *x.Generation
	}
	return 0
}

func (x *BackgroundExecutePolicy) GetExpiration() uint32 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

func (x *BackgroundExecutePolicy) GetRespondAllOps() bool {
	if x != nil && x.RespondAllOps != nil {
		return *x.RespondAllOps
	}
	return false
}

func (x *BackgroundExecutePolicy) GetDurableDelete() bool {
	if x != nil && x.DurableDelete != nil {
		return *x.DurableDelete
	}
	return false
}

func (x *BackgroundExecutePolicy) GetXdr() bool {
	if x != nil && x.Xdr != nil {
		return *x.Xdr
	}
	return false
}

type BackgroundExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Background write policy
	WritePolicy *BackgroundExecutePolicy `protobuf:"bytes,1,opt,name=writePolicy,proto3,oneof" json:"writePolicy,omitempty"`
	// The statement containing the UDF function reference
	// or the operations to be performed on matching record
	Statement *Statement `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *BackgroundExecuteRequest) Reset() {
	*x = BackgroundExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundExecuteRequest) ProtoMessage() {}

func (x *BackgroundExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundExecuteRequest.ProtoReflect.Descriptor instead.
func (*BackgroundExecuteRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{16}
}

func (x *BackgroundExecuteRequest) GetWritePolicy() *BackgroundExecutePolicy {
	if x != nil {
		return x.WritePolicy
	}
	return nil
}

func (x *BackgroundExecuteRequest) GetStatement() *Statement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type BackgroundTaskStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the task.
	TaskId int64 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	// If true indicates the task is a scan task else task is a query
	IsScan bool `protobuf:"varint,2,opt,name=isScan,proto3" json:"isScan,omitempty"`
}

func (x *BackgroundTaskStatusRequest) Reset() {
	*x = BackgroundTaskStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundTaskStatusRequest) ProtoMessage() {}

func (x *BackgroundTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*BackgroundTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{17}
}

func (x *BackgroundTaskStatusRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *BackgroundTaskStatusRequest) GetIsScan() bool {
	if x != nil {
		return x.IsScan
	}
	return false
}

// Abort a request identified by id in the stream.
type AbortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the corresponding request in the stream to abort.
	// Not to be confused with the AbortRequest's id in the stream.
	AbortId uint32 `protobuf:"varint,1,opt,name=abortId,proto3" json:"abortId,omitempty"`
}

func (x *AbortRequest) Reset() {
	*x = AbortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aerospike_proxy_kv_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRequest) ProtoMessage() {}

func (x *AbortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aerospike_proxy_kv_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRequest.ProtoReflect.Descriptor instead.
func (*AbortRequest) Descriptor() ([]byte, []int) {
	return file_aerospike_proxy_kv_proto_rawDescGZIP(), []int{18}
}

func (x *AbortRequest) GetAbortId() uint32 {
	if x != nil {
		return x.AbortId
	}
	return 0
}

var File_aerospike_proxy_kv_proto protoreflect.FileDescriptor

var file_aerospike_proxy_kv_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x41, 0x50, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x43, 0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x41, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x41, 0x50, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x53, 0x43, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43,
	0x22, 0xbc, 0x05, 0x0a, 0x17, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0b, 0x73,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x02,
	0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x03, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x04, 0x52,
	0x0c, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x5a, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x05, 0x52,
	0x18, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x1b,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x06, 0x52, 0x1b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xf9, 0x01, 0x0a, 0x18, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x44, 0x6f, 0x75, 0x62, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65,
	0x78, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x04, 0x0a, 0x0a,
	0x53, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2b,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x52,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x12, 0x2b, 0x0a, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x62, 0x56, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x56, 0x61, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x01, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x61,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x02,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xc9, 0x05, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x41, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x41, 0x50, 0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x53, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x43, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x43, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x66,
	0x61, 0x69, 0x6c, 0x4f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c,
	0x4f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d,
	0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x42, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x4f, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xdb, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x74, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x74, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x7f, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x62, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a,
	0x04, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x05, 0x52, 0x10, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xcc, 0x06, 0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x12, 0x2b, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41,
	0x50, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x12, 0x2b, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x52, 0x0a,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x04, 0x52, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x48, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x07, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4f, 0x70,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x4f, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64,
	0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x09, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x78, 0x64, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x03, 0x78, 0x64, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x4f, 0x70, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x78, 0x64, 0x72, 0x22,
	0x95, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x4d, 0x0a, 0x1b, 0x42, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x22, 0x28, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x2a, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x50, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x2a, 0x52, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x43, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x49, 0x4e, 0x45, 0x41, 0x52, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x48, 0x0a, 0x13, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x50, 0x4b, 0x45,
	0x59, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x50, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x53, 0x10, 0x03, 0x2a, 0x84, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x44, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x44, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x50, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x08, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x55, 0x43, 0x48,
	0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x0e,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08,
	0x48, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4c,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x11, 0x2a, 0x61, 0x0a, 0x12, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x2a, 0x45, 0x0a,
	0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x5f,
	0x47, 0x54, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d,
	0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x32, 0x2f, 0x0a, 0x05,
	0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x41,
	0x62, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x9c, 0x0a,
	0x0a, 0x03, 0x4b, 0x56, 0x53, 0x12, 0x3d, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e,
	0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e,
	0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x3f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x41, 0x65,
	0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x3e, 0x0a, 0x05, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41,
	0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x40, 0x0a,
	0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73,
	0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e,
	0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x40,
	0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19,
	0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x47, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f,
	0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65,
	0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x93, 0x01, 0x0a,
	0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x3f, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x18, 0x2e,
	0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x32, 0xea, 0x03, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x11, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x1a, 0x42, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x4f, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72,
	0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x1d, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x19,
	0x2e, 0x41, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x57, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70,
	0x69, 0x6b, 0x65, 0x2f, 0x61, 0x65, 0x72, 0x6f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x37, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6b, 0x76, 0x73, 0x3b, 0x6b, 0x76, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aerospike_proxy_kv_proto_rawDescOnce sync.Once
	file_aerospike_proxy_kv_proto_rawDescData = file_aerospike_proxy_kv_proto_rawDesc
)

func file_aerospike_proxy_kv_proto_rawDescGZIP() []byte {
	file_aerospike_proxy_kv_proto_rawDescOnce.Do(func() {
		file_aerospike_proxy_kv_proto_rawDescData = protoimpl.X.CompressGZIP(file_aerospike_proxy_kv_proto_rawDescData)
	})
	return file_aerospike_proxy_kv_proto_rawDescData
}

var file_aerospike_proxy_kv_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_aerospike_proxy_kv_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_aerospike_proxy_kv_proto_goTypes = []interface{}{
	(ReadModeAP)(0),                     // 0: ReadModeAP
	(ReadModeSC)(0),                     // 1: ReadModeSC
	(Replica)(0),                        // 2: Replica
	(IndexCollectionType)(0),            // 3: IndexCollectionType
	(OperationType)(0),                  // 4: OperationType
	(RecordExistsAction)(0),             // 5: RecordExistsAction
	(GenerationPolicy)(0),               // 6: GenerationPolicy
	(CommitLevel)(0),                    // 7: CommitLevel
	(BackgroundTaskStatus)(0),           // 8: BackgroundTaskStatus
	(*AboutRequest)(nil),                // 9: AboutRequest
	(*AboutResponse)(nil),               // 10: AboutResponse
	(*ReadPolicy)(nil),                  // 11: ReadPolicy
	(*WritePolicy)(nil),                 // 12: WritePolicy
	(*AerospikeRequestPayload)(nil),     // 13: AerospikeRequestPayload
	(*AerospikeResponsePayload)(nil),    // 14: AerospikeResponsePayload
	(*ScanPolicy)(nil),                  // 15: ScanPolicy
	(*PartitionStatus)(nil),             // 16: PartitionStatus
	(*PartitionFilter)(nil),             // 17: PartitionFilter
	(*ScanRequest)(nil),                 // 18: ScanRequest
	(*QueryPolicy)(nil),                 // 19: QueryPolicy
	(*Filter)(nil),                      // 20: Filter
	(*Operation)(nil),                   // 21: Operation
	(*Statement)(nil),                   // 22: Statement
	(*QueryRequest)(nil),                // 23: QueryRequest
	(*BackgroundExecutePolicy)(nil),     // 24: BackgroundExecutePolicy
	(*BackgroundExecuteRequest)(nil),    // 25: BackgroundExecuteRequest
	(*BackgroundTaskStatusRequest)(nil), // 26: BackgroundTaskStatusRequest
	(*AbortRequest)(nil),                // 27: AbortRequest
}
var file_aerospike_proxy_kv_proto_depIdxs = []int32{
	2,  // 0: ReadPolicy.replica:type_name -> Replica
	0,  // 1: ReadPolicy.readModeAP:type_name -> ReadModeAP
	1,  // 2: ReadPolicy.readModeSC:type_name -> ReadModeSC
	2,  // 3: WritePolicy.replica:type_name -> Replica
	0,  // 4: WritePolicy.readModeAP:type_name -> ReadModeAP
	1,  // 5: WritePolicy.readModeSC:type_name -> ReadModeSC
	11, // 6: AerospikeRequestPayload.readPolicy:type_name -> ReadPolicy
	12, // 7: AerospikeRequestPayload.writePolicy:type_name -> WritePolicy
	18, // 8: AerospikeRequestPayload.scanRequest:type_name -> ScanRequest
	23, // 9: AerospikeRequestPayload.queryRequest:type_name -> QueryRequest
	27, // 10: AerospikeRequestPayload.abortRequest:type_name -> AbortRequest
	25, // 11: AerospikeRequestPayload.backgroundExecuteRequest:type_name -> BackgroundExecuteRequest
	26, // 12: AerospikeRequestPayload.backgroundTaskStatusRequest:type_name -> BackgroundTaskStatusRequest
	8,  // 13: AerospikeResponsePayload.backgroundTaskStatus:type_name -> BackgroundTaskStatus
	2,  // 14: ScanPolicy.replica:type_name -> Replica
	0,  // 15: ScanPolicy.readModeAP:type_name -> ReadModeAP
	1,  // 16: ScanPolicy.readModeSC:type_name -> ReadModeSC
	16, // 17: PartitionFilter.partitionStatuses:type_name -> PartitionStatus
	15, // 18: ScanRequest.scanPolicy:type_name -> ScanPolicy
	17, // 19: ScanRequest.partitionFilter:type_name -> PartitionFilter
	2,  // 20: QueryPolicy.replica:type_name -> Replica
	0,  // 21: QueryPolicy.readModeAP:type_name -> ReadModeAP
	1,  // 22: QueryPolicy.readModeSC:type_name -> ReadModeSC
	3,  // 23: Filter.colType:type_name -> IndexCollectionType
	4,  // 24: Operation.type:type_name -> OperationType
	20, // 25: Statement.filter:type_name -> Filter
	21, // 26: Statement.operations:type_name -> Operation
	19, // 27: QueryRequest.queryPolicy:type_name -> QueryPolicy
	22, // 28: QueryRequest.statement:type_name -> Statement
	17, // 29: QueryRequest.partitionFilter:type_name -> PartitionFilter
	2,  // 30: BackgroundExecutePolicy.replica:type_name -> Replica
	0,  // 31: BackgroundExecutePolicy.readModeAP:type_name -> ReadModeAP
	1,  // 32: BackgroundExecutePolicy.readModeSC:type_name -> ReadModeSC
	5,  // 33: BackgroundExecutePolicy.recordExistsAction:type_name -> RecordExistsAction
	6,  // 34: BackgroundExecutePolicy.generationPolicy:type_name -> GenerationPolicy
	7,  // 35: BackgroundExecutePolicy.commitLevel:type_name -> CommitLevel
	24, // 36: BackgroundExecuteRequest.writePolicy:type_name -> BackgroundExecutePolicy
	22, // 37: BackgroundExecuteRequest.statement:type_name -> Statement
	9,  // 38: About.Get:input_type -> AboutRequest
	13, // 39: KVS.Read:input_type -> AerospikeRequestPayload
	13, // 40: KVS.ReadStreaming:input_type -> AerospikeRequestPayload
	13, // 41: KVS.GetHeader:input_type -> AerospikeRequestPayload
	13, // 42: KVS.GetHeaderStreaming:input_type -> AerospikeRequestPayload
	13, // 43: KVS.Exists:input_type -> AerospikeRequestPayload
	13, // 44: KVS.ExistsStreaming:input_type -> AerospikeRequestPayload
	13, // 45: KVS.Write:input_type -> AerospikeRequestPayload
	13, // 46: KVS.WriteStreaming:input_type -> AerospikeRequestPayload
	13, // 47: KVS.Delete:input_type -> AerospikeRequestPayload
	13, // 48: KVS.DeleteStreaming:input_type -> AerospikeRequestPayload
	13, // 49: KVS.Touch:input_type -> AerospikeRequestPayload
	13, // 50: KVS.TouchStreaming:input_type -> AerospikeRequestPayload
	13, // 51: KVS.Operate:input_type -> AerospikeRequestPayload
	13, // 52: KVS.OperateStreaming:input_type -> AerospikeRequestPayload
	13, // 53: KVS.Execute:input_type -> AerospikeRequestPayload
	13, // 54: KVS.ExecuteStreaming:input_type -> AerospikeRequestPayload
	13, // 55: KVS.BatchOperate:input_type -> AerospikeRequestPayload
	13, // 56: KVS.BatchOperateStreaming:input_type -> AerospikeRequestPayload
	13, // 57: Scan.Scan:input_type -> AerospikeRequestPayload
	13, // 58: Scan.ScanStreaming:input_type -> AerospikeRequestPayload
	13, // 59: Query.Query:input_type -> AerospikeRequestPayload
	13, // 60: Query.QueryStreaming:input_type -> AerospikeRequestPayload
	13, // 61: Query.BackgroundExecute:input_type -> AerospikeRequestPayload
	13, // 62: Query.BackgroundExecuteStreaming:input_type -> AerospikeRequestPayload
	13, // 63: Query.BackgroundTaskStatus:input_type -> AerospikeRequestPayload
	13, // 64: Query.BackgroundTaskStatusStreaming:input_type -> AerospikeRequestPayload
	10, // 65: About.Get:output_type -> AboutResponse
	14, // 66: KVS.Read:output_type -> AerospikeResponsePayload
	14, // 67: KVS.ReadStreaming:output_type -> AerospikeResponsePayload
	14, // 68: KVS.GetHeader:output_type -> AerospikeResponsePayload
	14, // 69: KVS.GetHeaderStreaming:output_type -> AerospikeResponsePayload
	14, // 70: KVS.Exists:output_type -> AerospikeResponsePayload
	14, // 71: KVS.ExistsStreaming:output_type -> AerospikeResponsePayload
	14, // 72: KVS.Write:output_type -> AerospikeResponsePayload
	14, // 73: KVS.WriteStreaming:output_type -> AerospikeResponsePayload
	14, // 74: KVS.Delete:output_type -> AerospikeResponsePayload
	14, // 75: KVS.DeleteStreaming:output_type -> AerospikeResponsePayload
	14, // 76: KVS.Touch:output_type -> AerospikeResponsePayload
	14, // 77: KVS.TouchStreaming:output_type -> AerospikeResponsePayload
	14, // 78: KVS.Operate:output_type -> AerospikeResponsePayload
	14, // 79: KVS.OperateStreaming:output_type -> AerospikeResponsePayload
	14, // 80: KVS.Execute:output_type -> AerospikeResponsePayload
	14, // 81: KVS.ExecuteStreaming:output_type -> AerospikeResponsePayload
	14, // 82: KVS.BatchOperate:output_type -> AerospikeResponsePayload
	14, // 83: KVS.BatchOperateStreaming:output_type -> AerospikeResponsePayload
	14, // 84: Scan.Scan:output_type -> AerospikeResponsePayload
	14, // 85: Scan.ScanStreaming:output_type -> AerospikeResponsePayload
	14, // 86: Query.Query:output_type -> AerospikeResponsePayload
	14, // 87: Query.QueryStreaming:output_type -> AerospikeResponsePayload
	14, // 88: Query.BackgroundExecute:output_type -> AerospikeResponsePayload
	14, // 89: Query.BackgroundExecuteStreaming:output_type -> AerospikeResponsePayload
	14, // 90: Query.BackgroundTaskStatus:output_type -> AerospikeResponsePayload
	14, // 91: Query.BackgroundTaskStatusStreaming:output_type -> AerospikeResponsePayload
	65, // [65:92] is the sub-list for method output_type
	38, // [38:65] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_aerospike_proxy_kv_proto_init() }
func file_aerospike_proxy_kv_proto_init() {
	if File_aerospike_proxy_kv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aerospike_proxy_kv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AboutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AboutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AerospikeRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AerospikeResponsePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundExecutePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundTaskStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aerospike_proxy_kv_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aerospike_proxy_kv_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_aerospike_proxy_kv_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aerospike_proxy_kv_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_aerospike_proxy_kv_proto_goTypes,
		DependencyIndexes: file_aerospike_proxy_kv_proto_depIdxs,
		EnumInfos:         file_aerospike_proxy_kv_proto_enumTypes,
		MessageInfos:      file_aerospike_proxy_kv_proto_msgTypes,
	}.Build()
	File_aerospike_proxy_kv_proto = out.File
	file_aerospike_proxy_kv_proto_rawDesc = nil
	file_aerospike_proxy_kv_proto_goTypes = nil
	file_aerospike_proxy_kv_proto_depIdxs = nil
}
